<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
    xmlns:spring="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security"
    xmlns:ss="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/current/mule-spring-security.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    <sub-flow name="singleSaveCheckSubflow">
        <choice doc:name="Choice">
            <when expression="#[payload.success == false]">
                <dw:transform-message doc:name="Transform Message" metadata:id="6c427cdf-0add-4d63-8735-fa0a7308d9cb">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message : 'Account ' ++ flowVars.ID ++ ' save failed.',
	errors: payload.errors map {
		external_status_code: $.statusCode as :string
	}	
}
]]></dw:set-payload>
                </dw:transform-message>
                <set-property propertyName="http.status" value="400" doc:name="Code 400"/>
            </when>
            <otherwise>
                <set-payload value="{&quot;message&quot; : &quot;Account #[flowVars.ID] saved successfully!&quot;}" mimeType="application/json" doc:name="Set Payload"/>
            </otherwise>
        </choice>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
    </sub-flow>
    <flow name="getFlow">
        <flow-ref name="setParametersSubFlow" doc:name="setParametersSubFlow"/>
        <sfdc:query config-ref="Salesforce__Basic_Authentication" query="dsql:SELECT Id,Name,Phone,BillingCity,BillingCountry,BillingPostalCode,BillingState,BillingStreet FROM Account  WHERE #[flowVars.queryCond] ORDER BY LastModifiedDate DESC" doc:name="Salesforce Query"/>
        <flow-ref name="accountListToJsonSubFlow" doc:name="accountListToJsonSubFlow"/>
    </flow>
    <flow name="getByIdFlow">
        <sfdc:retrieve config-ref="Salesforce__Basic_Authentication" type="Account" doc:name="Salesforce">
            <sfdc:ids>
                <sfdc:id>#[flowVars.ID]</sfdc:id>
            </sfdc:ids>
            <sfdc:fields>
                <sfdc:field>Id</sfdc:field>
                <sfdc:field>Name</sfdc:field>
                <sfdc:field>Phone</sfdc:field>
                <sfdc:field>BillingCity</sfdc:field>
                <sfdc:field>BillingCountry</sfdc:field>
                <sfdc:field>BillingPostalCode</sfdc:field>
                <sfdc:field>BillingState</sfdc:field>
                <sfdc:field>BillingStreet</sfdc:field>
            </sfdc:fields>
        </sfdc:retrieve>
        <flow-ref name="accountListToJsonSubFlow" doc:name="accountListToJsonSubFlow"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <flow-ref name="404Subflow" doc:name="404Subflow"/>
        </catch-exception-strategy>
    </flow>
    <flow name="postFlow">
        <dw:transform-message doc:name="Transform Message" metadata:id="ddab7e10-0c5a-41d8-8778-96ae1464f984">
            <dw:input-payload mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	Name: payload.Name,
	BillingStreet: payload.BillingStreet,
	BillingCity: payload.BillingCity,
	BillingState: payload.BillingState,
	BillingPostalCode: payload.BillingPostalCode,
	BillingCountry: payload.BillingCountry,
	Phone: payload.Phone
}]]></dw:set-payload>
        </dw:transform-message>
        <validation:all doc:name="Validate Input">
            <validation:validations>
                <validation:is-not-empty value="#[payload['Name']]" message="Name cannot be empty!" exceptionClass="java.lang.IllegalArgumentException"/>
                <validation:is-not-empty value="#[payload['BillingStreet']]" message="BillingStreet cannot be empty" exceptionClass="java.lang.IllegalArgumentException"/>
            </validation:validations>
        </validation:all>
        <set-variable variableName="input" value="#[payload]" doc:name="save input body"/>
        <sfdc:query config-ref="Salesforce__Basic_Authentication" query="dsql:SELECT Name FROM Account WHERE Name = '#[payload.Name]'" doc:name="check Name Existence"/>
        <set-variable variableName="exists" value="#[payload.size() &gt; 0]" doc:name="Variable"/>
        <choice doc:name="Choice">
            <when expression="#[payload.size() &gt; 0]">
                <set-payload value="{ &quot;message&quot; : &quot;Account with such name '#[flowVars.input.Name]' already exists, cannot create a new one&quot;}" doc:name="Account already exists"/>
                <set-property propertyName="http.status" value="400" doc:name="Code 400"/>
            </when>
            <otherwise>
                <dw:transform-message doc:name="restore input" metadata:id="02ae39d7-395a-41cd-acbb-4bdb172dab87">
                    <dw:input-variable variableName="input"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{
	Name: flowVars.input.Name,
	BillingStreet: flowVars.input.BillingStreet,
	BillingCity: flowVars.input.BillingCity,
	BillingState: flowVars.input.BillingState,
	BillingPostalCode: flowVars.input.BillingPostalCode,
	BillingCountry: flowVars.input.BillingCountry,
	Phone: flowVars.input.Phone
}]]]></dw:set-payload>
                </dw:transform-message>
                <sfdc:create config-ref="Salesforce__Basic_Authentication" type="Account" doc:name="Salesforce Create">
                    <sfdc:objects ref="#[payload]"/>
                </sfdc:create>
                <set-variable variableName="ID" value="#[&quot;for '&quot; + flowVars.input.Name +&quot;'&quot;]" doc:name="Variable"/>
                <flow-ref name="singleSaveCheckSubflow" doc:name="singleSaveCheckSubflow"/>
            </otherwise>
        </choice>
        <set-property propertyName="Content-Type" value="application/json" doc:name="set content type"/>
        <logger level="INFO" doc:name="Logger" message="#[payload]"/>
    </flow>
    <flow name="putByIdFlow">
        <dw:transform-message doc:name="Transform Message" metadata:id="d7dc104f-27fc-4162-bbeb-b4bcef66783c">
            <dw:input-payload mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	Id: flowVars.ID,
	Name: payload.Name,
	BillingStreet: payload.BillingStreet,
	BillingCity: payload.BillingCity,
	BillingState: payload.BillingState,
	BillingPostalCode: payload.BillingPostalCode,
	BillingCountry: payload.BillingCountry,
	Phone: payload.Phone,
	fieldsToNull:  (payload filter ($ == null or $ == '') pluck $$ as :string)
}]]></dw:set-payload>
        </dw:transform-message>
        <validation:all doc:name="Validate Input">
            <validation:validations>
                <validation:is-not-empty value="#[payload['BillingStreet']]" message="BillingStreet cannot be empty" exceptionClass="java.lang.IllegalArgumentException"/>
                <validation:is-not-empty value="#[payload['Name']]" message="Name cannot be empty!" exceptionClass="java.lang.IllegalArgumentException"/>
            </validation:validations>
        </validation:all>
        <sfdc:update-single config-ref="Salesforce__Basic_Authentication" type="Account" doc:name="Salesforce"/>
        <flow-ref name="singleSaveCheckSubflow" doc:name="singleSaveCheckSubflow"/>
    </flow>
    <flow name="deleteByIdFlow">
        <expression-component doc:name="Expression"><![CDATA[payload = [flowVars.ID]]]></expression-component>
        <sfdc:delete config-ref="Salesforce__Basic_Authentication" doc:name="Salesforce"/>
        <choice doc:name="Choice">
            <when expression="#[payload[0].success == false]">
                <dw:transform-message doc:name="Transform Message" metadata:id="6c427cdf-0add-4d63-8735-fa0a7308d9cb">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload map ((payload01, indexOfPayload01) -> {
	message : 'Account ' ++ flowVars.ID ++ ' deletion failed.',
	errors: payload01.errors map {
		external_status_code: $.statusCode as :string
	}	
})
]]></dw:set-payload>
                </dw:transform-message>
                <set-property propertyName="http.status" value="400" doc:name="Code 400"/>
            </when>
            <otherwise>
                <set-payload value="{ &quot;message&quot; : &quot;Account id=#[flowVars.ID] deleted successfully!&quot;}" mimeType="application/json" doc:name="Set Payload"/>
            </otherwise>
        </choice>
        <set-property propertyName="Content-Type" value="application/json" doc:name="set content type"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    <sub-flow name="setParametersSubFlow">
        <set-variable variableName="name" value="#[message.inboundProperties.'http.query.params'.name]" doc:name="setNameVar"/>
        <set-variable variableName="city" value="#[message.inboundProperties.'http.query.params'.city]" doc:name="setCityVar"/>
        <expression-component doc:name="build Query Condition"><![CDATA[flowVars.queryCond = "Name like '#[flowVars.name]%' ";
if (flowVars.city != null) {
	flowVars.queryCond += "and BillingCity = '#[flowVars.city]'"
}	]]></expression-component>
    </sub-flow>
    <sub-flow name="accountListToJsonSubFlow">
        <choice doc:name="Choice">
            <when expression="#[payload.size() &gt; 0 &amp;&amp; payload instanceof java.util.Iterator || payload instanceof java.util.List  &amp;&amp; payload[0].size()&gt;0]">
                <dw:transform-message doc:name="Transform Message" metadata:id="19c38b7b-418c-44e4-908e-9c9214e8e5d0">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload map ((payload01 , indexOfPayload01) -> {
	BillingCountry: payload01.BillingCountry,
	BillingCity: payload01.BillingCity,
	BillingStreet: payload01.BillingStreet,
	Phone: payload01.Phone,
	BillingPostalCode: payload01.BillingPostalCode,
	BillingState: payload01.BillingState,
	Id: payload01.Id,
	Name: payload01.Name
})]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <flow-ref name="404Subflow" doc:name="404Subflow"/>
            </otherwise>
        </choice>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
    </sub-flow>
    <flow name="testFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/sfaccounts_test" allowedMethods="GET" doc:name="HTTP"/>
        <set-payload value="{
      &quot;BillingCountry&quot;: &quot;&quot;,
      &quot;BillingCity&quot;: &quot;Singapore&quot;,
      &quot;BillingStreet&quot;: &quot;9 Tagore Lane\nSingapore, Singapore 787472\nSingapore&quot;,
      &quot;Phone&quot;: &quot;(650) 450-8810&quot;,
      &quot;BillingPostalCode&quot;: &quot;&quot;,
      &quot;BillingState&quot;: &quot;Singapore&quot;,
      &quot;Name&quot;: &quot;{accountName}&quot;
}" doc:name="Set Payload" mimeType="application/json"/>
        <set-variable variableName="accountName" value="#[&quot;MUnit_&quot; + Math.floor(100*Math.random());]" doc:name="Set Account Name"/>
        <expression-component doc:name="replaceName"><![CDATA[payload = payload.replace("{accountName}",flowVars.accountName);]]></expression-component>
        <http:request config-ref="HTTP_Request_Configuration" path="/sfaccounts" method="POST" doc:name="HTTP" metadata:id="68bd9d92-e000-4702-a45b-73f79eeaf890">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
    </flow>
    <sub-flow name="404Subflow">
        <set-payload value="{ &quot;message&quot; : &quot;Data not found!&quot;}" mimeType="application/json" doc:name="Set Payload"/>
        <set-property propertyName="http.status" value="404" doc:name="Code 404"/>
    </sub-flow>
    <flow name="testFlow2">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/sfaccounts_test2" allowedMethods="GET" doc:name="Copy_of_HTTP"/>
        <set-payload value="{       &quot;BillingCountry&quot;: &quot;&quot;,       &quot;BillingCity&quot;: &quot;Singapore&quot;,       &quot;BillingStreet&quot;: &quot;9 Tagore Lane\nSingapore, Singapore 787472\nSingapore&quot;,       &quot;Phone&quot;: &quot;(650) 450-8810&quot;,       &quot;BillingPostalCode&quot;: &quot;&quot;,       &quot;BillingState&quot;: &quot;Singapore&quot;,       &quot;Name&quot;: &quot;{accountName}&quot; }" mimeType="application/json" doc:name="Set Payload"/>
        <dw:transform-message doc:name="Transform Message" metadata:id="e474893a-3b6f-4ec1-af6f-30fd4d84791c">
            <dw:input-payload mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	Name: payload.Name,
	BillingStreet: payload.BillingStreet,
	BillingCity: payload.BillingCity,
	BillingState: payload.BillingState,
	BillingPostalCode: payload.BillingPostalCode,
	BillingCountry: payload.BillingCountry,
	Phone: payload.Phone,
	fieldsToNull:  (payload filter ($ == null or $ == '') pluck $$ as :string)
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    
</mule>
